bl_info = {
    "name": "Cycle Cameras",
    "author": "CoDEmanX",
    "version": (1, 0),
    "blender": (2, 65, 0),
    "location": "View3D > Ctrl + Shift + Left/Right Arrow",
    "description": "Switch scene camera to next or previous camera object",
    "warning": "",
    "wiki_url": "",
    "category": "3D View"}

import bpy

class VIEW3D_OT_cycle_cameras(bpy.types.Operator):
    """Cycle through available cameras"""
    bl_idname = "view3d.cycle_cameras"
    bl_label = "Cycle Cameras"
    bl_options = {'REGISTER', 'UNDO'}

    direction = bpy.props.EnumProperty(
        name="Direction",
        items=(
            ('FORWARD', "Forward", "Next camera (alphabetically)"),
            ('BACKWARD', "Backward", "Previous camera (alphabetically)"),
        ),
        default='FORWARD'
    )

    def execute(self, context):
        scene = context.scene
        cam_objects = [ob for ob in bpy.data.objects if ob.type == 'CAMERA']

        if len(cam_objects) == 0:
            return {'CANCELLED'}

        try:
            idx = cam_objects.index(scene.camera)
            new_idx = (idx + 1 if self.direction == 'FORWARD' else idx - 1) % len(cam_objects)
        except ValueError:
            new_idx = 0

        context.scene.camera = cam_objects[new_idx]
        return {'FINISHED'}


addon_keymaps = []

def register():
    bpy.utils.register_module(__name__)

    wm = bpy.context.window_manager
    kc = wm.keyconfigs.addon
    if kc:
        km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
        kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'RIGHT_ARROW', 'PRESS', ctrl=True, shift=True)
        kmi.properties.direction = 'FORWARD'
        addon_keymaps.append((km, kmi))
        kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'LEFT_ARROW', 'PRESS', ctrl=True, shift=True)
        kmi.properties.direction = 'BACKWARD'
        addon_keymaps.append((km, kmi))

def unregister():
    for km, kmi in addon_keymaps:
        km.keymap_items.remove(kmi)
    addon_keymaps.clear()
    bpy.utils.unregister_module(__name__)


if __name__ == "__main__":
    register()
;;;ES;;;

bl_info = {
"name": "Cámaras para bicicletas",
"autor": "CoDEmanX",
"versión": (1, 0),
"licuadora": (2, 65, 0),
"ubicación": "View3D > Ctrl + Shift + flecha izquierda/derecha",
"description": "Cambiar cámara de escena al objeto de cámara siguiente o anterior",
"advertencia": "",
"url_wiki": "",
"categoría": "Vista 3D"}

importar bpy

clase VIEW3D_OT_cycle_cameras(bpy.types.Operator):
"""Recorrer las cámaras disponibles"""
bl_idname = "view3d.cycle_cameras"
bl_label = "Cámaras para bicicletas"
bl_options = {'REGISTRAR', 'DESHACER'}

dirección = bpy.props.EnumProperty(
nombre="Dirección",
elementos = (
('ADELANTE', "Adelante", "Cámara siguiente (alfabéticamente)"),
('ATRÁS', "Atrás", "Cámara anterior (alfabéticamente)"),
),
predeterminado='ADELANTE'
)

def ejecutar(auto, contexto):
escena = contexto.escena
cam_objects = [ob para ob en bpy.data.objects si ob.type == 'CÁMARA']

si len(cam_objetos) == 0:
devolver {'CANCELADO'}

probar:
idx = cam_objects.index(escena.cámara)
new_idx = (idx + 1 if self.direction == 'ADELANTE' else idx - 1) % len(cam_objects)
excepto ValueError:
nuevo_idx = 0

context.scene.camera = cam_objects[nuevo_idx]
volver {'FINALIZADO'}


addon_keymaps = []

registro de definición ():
bpy.utils.register_module(__nombre__)

wm = bpy.context.window_manager
kc = wm.keyconfigs.addon
si kc:
km = wm.keyconfigs.addon.keymaps.new(name='Vista 3D', space_type='VISTA_3D')
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'RIGHT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'ADELANTE'
addon_keymaps.append((km, kmi))
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'LEFT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'HACIA ATRÁS'
addon_keymaps.append((km, kmi))

def anular el registro ():
para km, kmi en addon_keymaps:
km.keymap_items.remove(kmi)
addon_keymaps.clear()
bpy.utils.unregister_module(__nombre__)


si __nombre__ == "__principal__":
Registrarse()

;;;PT;;;

bl_info = {
"name": "Câmeras de Ciclo",
"autor": "CoDEmanX",
"versão": (1, 0),
"misturador": (2, 65, 0),
"location": "View3D > Ctrl + Shift + Seta Esquerda/Direita",
"description": "Mudar a câmera de cena para o objeto de câmera seguinte ou anterior",
"aviso": "",
"wiki_url": "",
"categoria": "Visão 3D"}

importar bpy

class VIEW3D_OT_cycle_cameras(bpy.types.Operator):
"""Percorrer as câmeras disponíveis"""
bl_idname = "view3d.cycle_cameras"
bl_label = "Câmeras de Ciclo"
bl_options = {'REGISTER', 'UNDO'}

direção = bpy.props.EnumProperty(
nome="Direção",
itens=(
('FORWARD', "Forward", "Next camera (alfabeticamente)"),
('BACKWARD', "Backward", "Câmera anterior (em ordem alfabética)"),
),
default='AVANTE'
)

def execute(self, context):
cena = contexto.cena
cam_objects = [ob para ob em bpy.data.objects if ob.type == 'CAMERA']

if len(cam_objects) == 0:
return {'CANCELADO'}

tentar:
idx = cam_objects.index(cena.camera)
new_idx = (idx + 1 se self.direction == 'FORWARD' else idx - 1) % len(cam_objects)
exceto ValueError:
novo_idx = 0

context.scene.camera = cam_objects[new_idx]
return {'CONCLUÍDO'}


addon_keymaps = []

def registrador():
bpy.utils.register_module(__name__)

wm = bpy.context.window_manager
kc = wm.keyconfigs.addon
se kc:
km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'RIGHT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'FORWARD'
addon_keymaps.append((km, kmi))
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'LEFT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'ATRÁS'
addon_keymaps.append((km, kmi))

def unregister():
para km, kmi em addon_keymaps:
km.keymap_items.remove(kmi)
addon_keymaps.clear()
bpy.utils.unregister_module(__name__)


if __name__ == "__main__":
registro()

;;;FR;;;

bl_info = {
"name": "Cycle caméras",
"auteur": "CoDEmanX",
"version": (1, 0),
"mélangeur": (2, 65, 0),
"location": "View3D > Ctrl + Maj + Flèche gauche/droite",
"description": "Passer la caméra de la scène à l'objet caméra suivant ou précédent",
"Attention": "",
"url_wiki": "",
"category": "Vue 3D"}

importer bpy

classe VIEW3D_OT_cycle_cameras(bpy.types.Operator) :
"""Faire défiler les caméras disponibles"""
bl_idname = "view3d.cycle_cameras"
bl_label = "Cycle caméras"
bl_options = {'ENREGISTRER', 'ANNULER'}

direction = bpy.props.EnumProperty(
nom="Direction",
articles=(
("AVANT", "Avant", "Caméra suivante (par ordre alphabétique)"),
('BACKWARD', "Backward", "Caméra précédente (par ordre alphabétique)"),
),
par défaut='AVANT'
)

def execute(self, context):
scène = contexte.scène
cam_objects = [ob pour ob dans bpy.data.objects si ob.type == 'CAMERA']

si len(cam_objects) == 0 :
retour {'ANNULÉ'}

essayer:
idx = cam_objects.index(scene.camera)
new_idx = (idx + 1 if self.direction == 'FORWARD' else idx - 1) % len(cam_objects)
sauf ValueError :
nouveau_idx = 0

context.scene.camera = cam_objects[new_idx]
retour {'TERMINÉ'}


addon_keymaps = []

def registre() :
bpy.utils.register_module(__nom__)

wm = bpy.context.window_manager
kc = wm.keyconfigs.addon
si kc :
km = wm.keyconfigs.addon.keymaps.new(name='Vue 3D', space_type='VIEW_3D')
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'RIGHT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'AVANT'
addon_keymaps.append((km, kmi))
kmi = km.keymap_items.new(VIEW3D_OT_cycle_cameras.bl_idname, 'LEFT_ARROW', 'PRESS', ctrl=True, shift=True)
kmi.properties.direction = 'ARRIERE'
addon_keymaps.append((km, kmi))

def unregister() :
pour km, kmi dans addon_keymaps :
km.keymap_items.remove(kmi)
addon_keymaps.clear()
bpy.utils.unregister_module(__name__)


si __nom__ == "__main__":
S'inscrire()
